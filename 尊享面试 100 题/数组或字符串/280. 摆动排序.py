# -*- coding: utf-8 -*-
# Time    : 2023/5/27 23:35
# Author  : Walter
# File    : 280. 摆动排序.py
# License : (C)Copyright Walter
# Version : 1.0
# Desc    :
'''
给你一个的整数数组 nums, 将该数组重新排序后使 nums[0] <= nums[1] >= nums[2] <= nums[3]...
输入数组总是有一个有效的答案。

示例 1:
输入：nums = [3,5,2,1,6,4]
输出：[3,5,1,6,2,4]
解释：[1,6,2,5,3,4]也是有效的答案

示例 2:
输入：nums = [6,6,5,6,3,8]
输出：[6,6,5,6,3,8]


提示：
1 <= nums.length <= 5 * 104
0 <= nums[i] <= 104
输入的 nums 保证至少有一个答案。
'''
from typing import List

# 解法一：排序 【通过】
# 一个显而易见的解法是先将数组排序，再从第二个元素开始逐对交换元素的位置。如：
#    [1, 2, 3, 4, 5, 6]
#        ↑  ↑  ↑  ↑
#        swap  swap
#
# => [1, 3, 2, 5, 4, 6]


'''
wiggleSort 方法对给定的整数数组进行排序，然后将数组中相邻的两个元素交换，使得交换后的数组满足以下条件：
对于所有的奇数下标 i，nums[i] 小于 nums[i+1]。
对于所有的偶数下标 i，nums[i] 大于 nums[i+1]。
因此，对于输入 [3, 5, 2, 1, 6, 4]，该方法首先对数组进行排序，
得到 [1, 2, 3, 4, 5, 6]。然后，它从下标 1 开始，每隔一个元素交换相邻的两个元素。
具体来说，它将下标 1 和 2 的元素交换，得到 [1, 3, 2, 5, 4, 6]；然后将下标 3 和 4 的元素交换，
得到 [1, 3, 2, 5, 4, 6]；最后将下标 5 和 6 的元素交换，得到 [对于输入 [3, 5, 2, 1, 6, 4]，
根据给定的 wiggleSort` 方法，程序的具体执行过程如下：
首先将输入数组排序，得到 [1, 2, 3, 4, 5, 6]。
然后从下标 1 开始，每隔一个元素交换相邻的两个元素，直到倒数第二个元素。具体来说，程序将下标 1 和 2 的元素交换，得到 [1, 3, 2, 4, 5, 6]；然后将下标 3 和 4 的元素交换，得到 [1, 3, 2, 5, 4, 6]；最后将下标 5 和 6 的元素交换，得到 [1, 3, 2, 5, 4, 6]。
程序返回 None，因为该方法没有返回值。
因此，对于输入 [3, 5, 2, 1, 6, 4]，程序不会输出任何内容，但是输入数组会被排序和交换，得到 [1, 3, 2, 5, 4, 6]。
'''


class Solution:
    def wiggleSort(self, nums: List[int]) -> List[int]:
        nums.sort()
        for i in range(1, len(nums) - 1, 2):
            self.swap(nums, i, i + 1)
        return nums

    def swap(self, nums: List[int], i: int, j: int) -> None:
        nums[i], nums[j] = nums[j], nums[i]


print(Solution().wiggleSort([3, 5, 2, 1, 6, 4]))
