# -*- coding: utf-8 -*-
# Time    : 2024/11/2 18:44
# Author  : Walter
# File    : 11. 盛最多水的容器.py
# License : (C)Copyright Walter
# Version : 1.0
# Desc    :
'''
给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
说明：你不能倾斜容器。
示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：
输入：height = [1,1]
输出：1

提示：
n == height.length
2 <= n <= 105
0 <= height[i] <= 104
'''
from typing import List


# 方法一：双指针
class Solution:
    def maxArea(self, height: List[int]) -> int:
        # 左右指针下标
        l, r = 0, len(height) - 1
        # 存储最大面积
        ans = 0
        # 左右指针未相遇时继续循环
        while l < r:
            # 计算高度最小值和指针间距的成绩，就等于当前面积area
            area = min(height[l], height[r]) * (r - l)
            # 更新最大面积
            ans = max(ans, area)
            # 移动指针，移动高度较小的那一个
            if height[l] <= height[r]:
                l += 1
            else:
                r -= 1
        return ans


print(Solution().maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]))

'''
解析：
假设当前左指针和右指针指向的数分别为 x 和 y，我们假设 x≤y，两个指针之间的距离为 t，它们组成的容器的容量为x∗t
如果我们保持左指针的位置不变，那么无论右指针在哪里，这个容器的容量都不会超过 x∗t 了
无论我们怎么移动右指针，得到的容器的容量都小于移动前容器的容量。也就是说，这个左指针对应的数不会作为容器的边界了，那么我们就可以丢弃这个位置，将左指针向右移动一个位置，此时新的左指针于原先的右指针之间的左右位置，才可能会作为容器的边界。
对应数字较小的那个指针以后不可能作为容器的边界了，将其丢弃，并移动对应的指针。
'''
